name: Update .mrs

on:
  schedule:
    - cron: '30 18 * * *'
  workflow_dispatch:

jobs:
  update-rules:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create autoupdate directory if not exists
        run: mkdir -p autoupdate
        shell: bash

      - name: Download source rule files
        run: |
          curl -sSL -o autoupdate/gfw.yaml https://raw.githubusercontent.com/ameyukisora/Clash-Rule/refs/heads/master/autoupdate/gfw.yaml
          curl -sSL -o autoupdate/cn.yaml https://raw.githubusercontent.com/ameyukisora/Clash-Rule/refs/heads/master/autoupdate/cn.yaml
          curl -sSL -o autoupdate/cn_v6.yaml https://raw.githubusercontent.com/ameyukisora/Clash-Rule/refs/heads/master/autoupdate/cn_v6.yaml
          curl -sSL -o autoupdate/cndomain.yaml https://raw.githubusercontent.com/ameyukisora/Clash-Rule/refs/heads/master/autoupdate/cndomain.yaml
        shell: bash

      - name: Get latest mihomo release info
        id: get_latest_release
        shell: pwsh
        run: |
          $latest = Invoke-RestMethod -Uri "https://api.github.com/repos/MetaCubeX/mihomo/releases/latest"
          $version = $latest.tag_name
          $asset = $latest.assets | Where-Object { $_.name -like "*windows-amd64*.zip" } | Select-Object -First 1
          if (-not $asset) {
            Write-Error "No Windows amd64 .zip asset found in latest release."
            exit 1
          }
          Write-Output "version=$version" >> $env:GITHUB_OUTPUT
          Write-Output "asset_url=$($asset.browser_download_url)" >> $env:GITHUB_OUTPUT

      - name: Download and extract mihomo for Windows
        shell: pwsh
        run: |
          $zipPath = "mihomo.zip"
          Invoke-WebRequest -Uri "${{ steps.get_latest_release.outputs.asset_url }}" -OutFile $zipPath
          Expand-Archive -Path $zipPath -DestinationPath . -Force

          # 查找解压后以 "mihomo-windows-amd64" 开头的 .exe 文件
          $exeFiles = Get-ChildItem -Path . -Filter "mihomo-windows-amd64*.exe"
          if ($exeFiles.Count -eq 0) {
            Write-Error "No mihomo-windows-amd64*.exe found after extraction."
            exit 1
          }

          # 取第一个匹配的文件（通常只有一个）
          $sourceExe = $exeFiles[0].FullName
          $targetExe = "mihomo.exe"

          Write-Host "Found: $sourceExe"
          Write-Host "Renaming to: $targetExe"
          Move-Item -Path $sourceExe -Destination $targetExe -Force

          # 清理 zip 和可能的多余文件
          Remove-Item $zipPath -Force
          # 如果有 LICENSE/README 等，也可选择保留或删除，不影响

      - name: Convert rules to .mrs format
        run: |
          ./mihomo.exe convert-ruleset domain yaml autoupdate/gfw.yaml autoupdate/gfw.mrs
          ./mihomo.exe convert-ruleset ipcidr yaml autoupdate/cn.yaml autoupdate/cn.mrs
          ./mihomo.exe convert-ruleset ipcidr yaml autoupdate/cn_v6.yaml autoupdate/cn_v6.mrs
          ./mihomo.exe convert-ruleset domain yaml autoupdate/cndomain.yaml autoupdate/cndomain.mrs
        shell: bash

      - name: Commit and push changes if any
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [[ $(git status --porcelain autoupdate/*.mrs) ]]; then
            echo "Changes detected in rule sets. Preparing to commit."
            git add autoupdate/*.mrs
            git commit -m "Update mrs at $(date -u +"%Y-%m-%d %H:%M:%S" -d "+8 hours")"
            git push
          else
            echo "No changes to commit."
          fi
        shell: bash
